# Dockerfile.prod - Otimizado para Produção na Hostinger
# Build stage - Compile dependencies
FROM python:3.11-slim AS builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    libpq-dev \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir --user -r requirements.txt

# Runtime stage - Production optimized
FROM python:3.11-slim

# Create non-root user for security
RUN groupadd -r marina && useradd -r -g marina marina

# Install only runtime dependencies (minimal)
RUN apt-get update && apt-get install -y \
    libpq5 \
    tesseract-ocr \
    tesseract-ocr-por \
    ffmpeg \
    poppler-utils \
    libmagic1 \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy Python packages from builder
COPY --from=builder --chown=marina:marina /root/.local /home/marina/.local

# Set environment variables for production
ENV PATH=/home/marina/.local/bin:$PATH \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    ENVIRONMENT=production \
    PORT=8000

# Set working directory
WORKDIR /app

# Copy application code with proper ownership
COPY --chown=marina:marina . .

# Download NLTK data with error handling
RUN python -c "try: import nltk; nltk.download('punkt', quiet=True); print('NLTK punkt downloaded')\nexcept Exception as e: print(f'NLTK download failed: {e}')" || true

# Clean Python cache and compile for performance
RUN find . -type d -name __pycache__ -exec rm -rf {} + 2>/dev/null || true && \
    find . -type f -name "*.pyc" -delete 2>/dev/null || true && \
    find . -type f -name "*.pyo" -delete 2>/dev/null || true && \
    python -c "import compileall; compileall.compile_dir('/app', force=True, quiet=True)" || true

# Create necessary directories with proper permissions
RUN mkdir -p /app/logs /app/uploads /app/temp && \
    chown -R marina:marina /app

# Switch to non-root user
USER marina

# Health check optimized for production
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Expose port
EXPOSE 8000

# Production command with optimized settings for Hostinger VPS KM4
# 2 workers for 4 vCPU, keep-alive optimized, proper timeout
CMD ["uvicorn", "main:app", \
     "--host", "0.0.0.0", \
     "--port", "8000", \
     "--workers", "2", \
     "--worker-class", "uvicorn.workers.UvicornWorker", \
     "--keepalive", "2", \
     "--max-requests", "1000", \
     "--max-requests-jitter", "100", \
     "--timeout-keep-alive", "5", \
     "--access-log", \
     "--log-level", "info"]