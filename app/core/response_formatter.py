"""
Response Formatter - Garante formata√ß√£o correta das respostas
Processa e valida respostas do agente sem tags especiais
"""

import re
from app.utils.logger import emoji_logger


class ResponseFormatter:
    """
    Formata e valida respostas do agente
    Sistema simplificado sem tags especiais
    """

    @staticmethod
    def ensure_response_tags(response: str) -> str:
        """
        Processa resposta e remove tags desnecess√°rias
        Retorna texto limpo e direto
        """
        if not response:
            return "Ol√°! Aqui √© Marina Campelo, do N√°utico! Como posso te ajudar?"
        
        # CR√çTICO: Detecta se a resposta cont√©m uma tool e N√ÉO a processa
        tool_pattern = r'\[\w+[:\.].*?\]'
        if re.search(tool_pattern, response):
            emoji_logger.system_debug("üîß Tool detectada na resposta - n√£o processando")
            return response

        # Remove todas as tags RESPOSTA_FINAL existentes
        clean_response = re.sub(r'</?RESPOSTA_FINAL>', '', response, flags=re.IGNORECASE)
        clean_response = clean_response.strip()

        # Remove padr√µes de "reasoning" que n√£o devem aparecer para o usu√°rio
        reasoning_patterns = [
            r'^(Analisando|Vou|Deixa eu|Processando|Verificando).*?\n',
            r'^(Ok|Certo|Entendi|Hmm)[\.,!]?\s*\n',
            r'^\\[.*?\\]\s*\n'
        ]
        for pattern in reasoning_patterns:
            clean_response = re.sub(
                pattern, '', clean_response,
                flags=re.MULTILINE | re.IGNORECASE
            )

        # Se ficou vazio, usar fallback
        if not clean_response or len(clean_response) < 10:
            emoji_logger.system_warning("Resposta vazia ap√≥s limpeza - usando fallback")
            clean_response = "Como posso te ajudar com o programa S√≥cio Mais Fiel do Nordeste?"

        emoji_logger.system_success(f"‚úÖ Resposta processada: {len(clean_response)} chars")
        return clean_response

    @staticmethod
    def validate_response_content(response: str) -> bool:
        """
        Valida se o conte√∫do da resposta est√° adequado
        """
        if not response or len(response.strip()) < 5:
            emoji_logger.system_error("ResponseFormatter", "Resposta muito curta ou vazia")
            return False

        # Verifica se n√£o √© s√≥ n√∫meros/s√≠mbolos
        if re.match(r'^[\s\d\W]+$', response.strip()):
            emoji_logger.system_error("ResponseFormatter", "Resposta sem texto v√°lido")
            return False

        # Verifica frases proibidas (reasoning vazado)
        forbidden_phrases = [
            "vou analisar", "processando", "calculando",
            "verificando", "aguarde", "s√≥ um momento", "um minutinho"
        ]
        content_lower = response.lower()
        for phrase in forbidden_phrases:
            if phrase in content_lower:
                emoji_logger.system_warning(f"‚ö†Ô∏è Frase proibida detectada: {phrase}")
                return False
        return True

    @staticmethod
    def get_safe_fallback(context: str = "in√≠cio") -> str:
        """
        Retorna uma resposta segura baseada no contexto
        """
        fallbacks = {
            "in√≠cio": "Ol√°! Aqui √© Marina Campelo, do N√°utico! Qual √© seu nome para eu te atender melhor?",
            "nome_coletado": "Perfeito! Hoje no programa S√≥cio Mais Fiel do Nordeste temos v√°rios planos incr√≠veis. H√° quanto tempo voc√™ torce para o N√°utico?",
            "valor_coletado": "Excelente! Vejo que voc√™ tem paix√£o pelo N√°utico. Vou te mostrar como fazer parte da nossa fam√≠lia de s√≥cios!",
            "default": "Como posso ajudar voc√™ a apoiar o N√°utico na campanha de acesso √† S√©rie B?"
        }
        return fallbacks.get(context, fallbacks["default"])


response_formatter = ResponseFormatter()